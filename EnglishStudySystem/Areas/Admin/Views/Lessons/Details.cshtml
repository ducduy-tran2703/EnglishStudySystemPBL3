@model EnglishStudySystem.Areas.Admin.ViewModel.LessonDetailsViewModel

@{
    ViewBag.Title = "Chi tiết Bài học";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-white mb-0" style="background: linear-gradient(135deg, #2c3e50, #3498db); padding: 10px 20px; border-radius: 8px;">
            <i class="fas fa-book-open me-2"></i>@ViewBag.Title
        </h2>
        <div>
            @Html.ActionLink("Chỉnh sửa Bài học", "Edit", new { id = Model.Id }, new { @class = "btn btn-warning" })
            @Html.ActionLink("Quay lại Chi tiết Danh mục", "Details", "Categories", new { id = Model.CategoryId }, new { @class = "btn btn-outline-secondary ms-2" })
        </div>
    </div>

    <div class="row">
        <!-- Cột thông tin bài học -->
        <div class="col-lg-6 mb-4">
            <div class="card shadow-sm" style="border: none; border-radius: 10px; overflow: hidden; height: fit-content;">
                <div class="card-header text-white py-3" style="background: linear-gradient(135deg, #3498db, #2ecc71);">
                    <h4 class="mb-0">
                        <i class="fas fa-info-circle me-2"></i>Thông tin Bài học
                    </h4>
                </div>
                <div class="card-body" style="background-color: #f8f9fa;">
                    <dl class="row">
                        <dt class="col-sm-4">
                            @Html.DisplayNameFor(model => model.Title)
                        </dt>
                        <dd class="col-sm-8">
                            @Html.DisplayFor(model => model.Title)
                        </dd>

                        <dt class="col-sm-4">
                            @Html.DisplayNameFor(model => model.Description)
                        </dt>
                        <dd class="col-sm-8">
                            @Html.DisplayFor(model => model.Description)
                        </dd>

                        <dt class="col-sm-4">
                            @Html.DisplayNameFor(model => model.IsFree)
                        </dt>
                        <dd class="col-sm-8">
                            <span class="badge @(Model.IsFree ? "bg-success" : "bg-warning")">
                                @(Model.IsFree ? "Miễn phí" : "Có phí")
                            </span>
                        </dd>

                        <dt class="col-sm-4">
                            @Html.DisplayNameFor(model => model.CategoryName)
                        </dt>
                        <dd class="col-sm-8">
                            <span class="badge bg-primary">@Html.DisplayFor(model => model.CategoryName)</span>
                        </dd>

                        <dt class="col-sm-4">
                            @Html.DisplayNameFor(model => model.CreatedByUserFullName)
                        </dt>
                        <dd class="col-sm-8">
                            @Html.DisplayFor(model => model.CreatedByUserFullName)
                            <small class="text-muted d-block">(@Html.DisplayFor(model => model.CreatedByUserRole))</small>
                        </dd>

                        <dt class="col-sm-4">
                            @Html.DisplayNameFor(model => model.CreatedDate)
                        </dt>
                        <dd class="col-sm-8">
                            <i class="fas fa-calendar-alt me-1"></i>
                            @Model.CreatedDate.ToString("dd/MM/yyyy HH:mm")
                        </dd>

                        @if (!string.IsNullOrEmpty(Model.UpdatedByUserId))
                        {
                            <dt class="col-sm-4">
                                Cập nhật bởi
                            </dt>
                            <dd class="col-sm-8">
                                @Html.DisplayFor(model => model.UpdatedByUserFullName)
                                <small class="text-muted d-block">(@Html.DisplayFor(model => model.UpdatedByUserRole))</small>
                                <small class="text-info">
                                    <i class="fas fa-clock me-1"></i>
                                    @Model.UpdatedDate.Value.ToString("dd/MM/yyyy HH:mm:ss")
                                </small>
                            </dd>
                        }

                        <dt class="col-sm-4">
                            @Html.DisplayNameFor(model => model.IsDeleted)
                        </dt>
                        <dd class="col-sm-8">
                            <span class="badge @(Model.IsDeleted ? "bg-danger" : "bg-success")">
                                @(Model.IsDeleted ? "Đã xóa" : "Hoạt động")
                            </span>
                            @if (Model.IsDeleted && Model.DeletedAt.HasValue)
                            {
                                <small class="text-danger d-block">
                                    <i class="fas fa-trash me-1"></i>
                                    Xóa lúc: @Model.DeletedAt.Value.ToString("dd/MM/yyyy HH:mm")
                                </small>
                            }
                        </dd>
                    </dl>
                </div>
            </div>
        </div>

        <!-- Cột video -->
        <div class="col-lg-6 mb-4">
            <div class="card shadow-sm" style="border: none; border-radius: 10px; overflow: hidden;">
                <div class="card-header text-white py-3" style="background: linear-gradient(135deg, #e74c3c, #f39c12);">
                    <h4 class="mb-0">
                        <i class="fas fa-play-circle me-2"></i>Video Bài học
                    </h4>
                </div>
                <div class="card-body p-0" style="background-color: #000;">
                    @if (!string.IsNullOrEmpty(Model.Video_URL))
                    {
                        <div class="ratio ratio-16x9">
                            @{
                                string embedUrl = "";
                                if (Model.Video_URL.Contains("youtube.com/watch?v="))
                                {
                                    embedUrl = Model.Video_URL.Replace("https://www.youtube.com/watch?v=", "https://www.youtube.com/embed/");
                                }
                                else if (Model.Video_URL.Contains("youtu.be/"))
                                {
                                    embedUrl = Model.Video_URL.Replace("https://youtu.be/", "https://www.youtube.com/embed/");
                                }
                                else if (Model.Video_URL.Contains("youtube.com/embed/"))
                                {
                                    embedUrl = Model.Video_URL;
                                }
                                else
                                {
                                    embedUrl = Model.Video_URL;
                                }
                            }
                            <iframe src="@embedUrl"
                                    title="Video bài học"
                                    frameborder="0"
                                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                    referrerpolicy="strict-origin-when-cross-origin"
                                    allowfullscreen
                                    style="border-radius: 0 0 10px 10px;"></iframe>
                        </div>
                        <div class="p-3 bg-light">
                            <small class="text-muted">
                                <i class="fas fa-link me-1"></i>
                                Nguồn: <a href="@Model.Video_URL" target="_blank" class="text-decoration-none">@Model.Video_URL</a>
                            </small>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex align-items-center justify-content-center" style="height: 300px; background: linear-gradient(135deg, #bdc3c7, #2c3e50);">
                            <div class="text-center text-white">
                                <i class="fas fa-video-slash fa-3x mb-3 opacity-50"></i>
                                <h5>Chưa có video</h5>
                                <p class="mb-0">Video sẽ được hiển thị tại đây</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <hr class="my-4" />

    @* --- Hiển thị Danh sách Bài kiểm tra liên quan --- *@
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="mb-0">
            <i class="fas fa-clipboard-list me-2"></i>
            Bài kiểm tra của Bài học này
        </h3>
        <p class="mb-0">
            @Html.ActionLink("Thêm mới Bài kiểm tra", "Create", "Test", new { lessonId = Model.Id }, new { @class = "btn btn-success" })
        </p>
    </div>

    @if (Model.Tests != null && Model.Tests.Any(t => !t.IsDeleted))
    {
        <div class="card shadow-sm" style="border: none; border-radius: 10px; overflow: hidden;">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-dark">
                        <tr>
                            <th><i class="fas fa-file-alt me-2"></i>@Html.DisplayNameFor(model => model.Tests.FirstOrDefault().Title)</th>
                            <th><i class="fas fa-question-circle me-2"></i>@Html.DisplayNameFor(model => model.Tests.FirstOrDefault().QuestionCount)</th>
                            <th><i class="fas fa-clock me-2"></i>@Html.DisplayNameFor(model => model.Tests.FirstOrDefault().Duration)</th>
                            <th class="text-center">Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var test in Model.Tests.Where(t => !t.IsDeleted).OrderBy(t => t.Id))
                        {
                            <tr>
                                <td>
                                    <strong>@Html.DisplayFor(modelItem => test.Title)</strong>
                                </td>
                                <td>
                                    <span class="badge bg-info">@Html.DisplayFor(modelItem => test.QuestionCount) câu</span>
                                </td>
                                <td>
                                    <span class="badge bg-warning text-dark">
                                        <i class="fas fa-stopwatch me-1"></i>
                                        @Html.DisplayFor(modelItem => test.Duration) phút
                                    </span>
                                </td>
                                <td class="text-center">
                                    <div class="btn-group" role="group">
                                        @Html.ActionLink("Chi tiết", "Details", "Test", new { id = test.Id }, new { @class = "btn btn-info btn-sm" })
                                        @Html.ActionLink("Sửa", "Edit", "Test", new { id = test.Id }, new { @class = "btn btn-warning btn-sm" })
                                        <button type="button" class="btn btn-danger btn-sm" onclick="showDeleteConfirmation(@test.Id, '@Html.Raw(HttpUtility.JavaScriptStringEncode(test.Title))')">
                                            <i class="fas fa-trash me-1"></i>Xóa
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else if (Model.Tests != null && Model.Tests.Any(t => t.IsDeleted))
    {
        <div class="alert alert-info text-center border-0 shadow-sm" role="alert" style="border-radius: 10px;">
            <i class="fas fa-info-circle me-2 fa-2x"></i>
            <h5 class="mt-2">Tất cả bài kiểm tra đã bị xóa</h5>
            <p class="mb-0">Tất cả bài kiểm tra của bài học này đã bị xóa mềm.</p>
        </div>
    }
    else
    {
        <div class="alert alert-warning text-center border-0 shadow-sm" role="alert" style="border-radius: 10px;">
            <i class="fas fa-exclamation-triangle me-2 fa-2x"></i>
            <h5 class="mt-2">Chưa có bài kiểm tra</h5>
            <p class="mb-0">Chưa có bài kiểm tra nào cho bài học này.</p>
        </div>
    }
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed top-0 start-50 translate-middle-x p-3" style="z-index: 9999;">
    <div id="deleteConfirmToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="false">
        <div class="toast-header bg-danger text-white border-0">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <strong class="me-auto">Xác nhận xóa bài kiểm tra</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body bg-white">
            <div class="d-flex align-items-start mb-3">
                <div class="flex-shrink-0 me-3">
                    <div class="d-flex align-items-center justify-content-center bg-danger bg-opacity-10 rounded-circle" style="width: 40px; height: 40px;">
                        <i class="fas fa-trash text-danger"></i>
                    </div>
                </div>
                <div class="flex-grow-1">
                    <h6 class="mb-1">Bạn có chắc chắn muốn xóa?</h6>
                    <p class="mb-2 text-muted">
                        Bài kiểm tra: <strong id="testNameToDelete" class="text-dark"></strong>
                    </p>
                    <div class="alert alert-warning py-2 px-3 mb-0" style="font-size: 0.875rem;">
                        <i class="fas fa-info-circle me-1"></i>
                        <strong>Lưu ý:</strong> Đây là thao tác xóa mềm, có thể khôi phục được.
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-end gap-2">
                <button type="button" class="btn btn-outline-secondary btn-sm px-3" data-bs-dismiss="toast">
                    <i class="fas fa-times me-1"></i>Hủy
                </button>
                <button type="button" class="btn btn-danger btn-sm px-3" id="confirmDeleteBtn">
                    <i class="fas fa-check me-1"></i>Xác nhận xóa
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Success Toast -->
<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
    <div id="successToast" class="toast" role="alert" aria-live="polite" aria-atomic="true" data-bs-delay="3000">
        <div class="toast-header bg-success text-white border-0">
            <i class="fas fa-check-circle me-2"></i>
            <strong class="me-auto">Thành công</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body bg-white">
            <div class="d-flex align-items-center">
                <i class="fas fa-check-circle text-success me-2"></i>
                <span id="successMessage">Đã xóa bài kiểm tra thành công!</span>
            </div>
        </div>
    </div>
</div>

<!-- Error Toast -->
<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
    <div id="errorToast" class="toast" role="alert" aria-live="polite" aria-atomic="true" data-bs-delay="5000">
        <div class="toast-header bg-danger text-white border-0">
            <i class="fas fa-exclamation-circle me-2"></i>
            <strong class="me-auto">Lỗi</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body bg-white">
            <div class="d-flex align-items-center">
                <i class="fas fa-exclamation-circle text-danger me-2"></i>
                <span id="errorMessage">Đã có lỗi xảy ra khi xóa bài kiểm tra!</span>
            </div>
        </div>
    </div>
</div>

<!-- Form ẩn để submit xóa -->
<div id="deleteFormsContainer" style="display: none;"></div>

@section Scripts {
    <script>
let currentTestId = null;
let currentTestTitle = '';

function showDeleteConfirmation(testId, testTitle) {
    currentTestId = testId;
    currentTestTitle = testTitle;

    document.getElementById('testNameToDelete').textContent = testTitle;

    // Tạo form ẩn với URL chính xác cho Area
    const formContainer = document.getElementById('deleteFormsContainer');
    formContainer.innerHTML = `
        <form id="deleteForm-${testId}" action="@Url.Action("SoftDelete", "Test", new { Area = "Admin" })/${testId}" method="post">
            @Html.AntiForgeryToken()
        </form>
    `;

    // Hiển thị toast xác nhận
    const confirmToast = new bootstrap.Toast(document.getElementById('deleteConfirmToast'));
    confirmToast.show();
}

document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
    if (currentTestId) {
        // Thay đổi nút thành trạng thái loading
        const btn = this;
        const originalContent = btn.innerHTML;
        btn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Đang xóa...';
        btn.disabled = true;

        // Ẩn toast xác nhận
        const confirmToast = bootstrap.Toast.getInstance(document.getElementById('deleteConfirmToast'));
        confirmToast.hide();

        // Gửi form xóa
        const form = document.getElementById(`deleteForm-${currentTestId}`);

        // Sử dụng fetch để gửi form và xử lý response
        const formData = new FormData(form);

        fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            // Kiểm tra nếu response redirect (status 302/200 với redirect)
            if (response.redirected || response.ok) {
                // Xóa thành công - hiển thị toast thành công
                showSuccessToast(`Đã xóa bài kiểm tra "${currentTestTitle}" thành công!`);

                // Tải lại trang sau 1.5 giây để cập nhật danh sách
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                // Lỗi từ server
                showErrorToast('Có lỗi xảy ra khi xóa bài kiểm tra. Vui lòng thử lại!');
            }
        })
        .catch(error => {
            // Lỗi network hoặc lỗi khác
            console.error('Error:', error);
            showErrorToast('Có lỗi xảy ra khi xóa bài kiểm tra. Vui lòng thử lại!');
        })
        .finally(() => {
            // Khôi phục trạng thái nút
            btn.innerHTML = originalContent;
            btn.disabled = false;
            currentTestId = null;
            currentTestTitle = '';
        });
    }
});

function showSuccessToast(message) {
    document.getElementById('successMessage').textContent = message;
    const successToast = new bootstrap.Toast(document.getElementById('successToast'));
    successToast.show();
}

function showErrorToast(message) {
    document.getElementById('errorMessage').textContent = message;
    const errorToast = new bootstrap.Toast(document.getElementById('errorToast'));
    errorToast.show();
}

// Xử lý khi đóng toast xác nhận bằng nút X hoặc click ra ngoài
document.getElementById('deleteConfirmToast').addEventListener('hidden.bs.toast', function () {
    // Reset lại các biến
    currentTestId = null;
    currentTestTitle = '';

    // Xóa form tạm thời
    document.getElementById('deleteFormsContainer').innerHTML = '';
});
    </script>
}

@section Styles {
    <style>
        .btn-info {
            background-color: #17a2b8;
            border-color: #17a2b8;
            color: white;
        }

        .btn-warning {
            background-color: #ffc107;
            border-color: #ffc107;
            color: #212529;
        }

        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
            color: white;
        }

        .btn-success {
            background-color: #28a745;
            border-color: #28a745;
            color: white;
        }

        .btn-outline-secondary {
            border-color: #6c757d;
            color: #6c757d;
        }

        .table thead th {
            border-bottom: 2px solid #dee2e6;
            vertical-align: middle;
            font-weight: 600;
        }

        .table tbody tr:hover {
            background-color: #f8f9fa;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transition: all 0.2s ease;
        }

        .table-striped tbody tr:nth-of-type(odd) {
            background-color: rgba(0, 0, 0, 0.02);
        }

        .card {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

            .card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
            }

        .badge {
            font-size: 0.8em;
            padding: 0.5em 0.75em;
            border-radius: 20px;
        }

        .btn-group .btn {
            margin: 0 1px;
            border-radius: 5px !important;
        }

        .alert {
            border-radius: 10px !important;
            border: none !important;
        }

        /* Toast Styles */
        .toast {
            min-width: 400px;
            border: none;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.12);
            backdrop-filter: blur(10px);
        }

        .toast-header {
            border-radius: 12px 12px 0 0;
            padding: 12px 16px;
            font-weight: 600;
        }

        .toast-body {
            padding: 16px;
            border-radius: 0 0 12px 12px;
        }

        /* Toast Animation */
        .toast.showing {
            animation: toastSlideDown 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }

        .toast.hide {
            animation: toastSlideUp 0.3s ease-in-out;
        }

        @@keyframes toastSlideDown {
            from {
                transform: translateY(-100px) translateX(-50%);
                opacity: 0;
            }

            to {
                transform: translateY(0) translateX(-50%);
                opacity: 1;
            }
        }

        @@keyframes toastSlideUp {
            from {
                transform: translateY(0) translateX(-50%);
                opacity: 1;
            }

            to {
                transform: translateY(-100px) translateX(-50%);
                opacity: 0;
            }
        }

        /* Success Toast */
        #successToast .toast-header {
            background: linear-gradient(135deg, #28a745, #20c997) !important;
        }

        /* Error Toast */
        #errorToast .toast-header {
            background: linear-gradient(135deg, #dc3545, #e74c3c) !important;
        }

        /* Confirm Toast */
        #deleteConfirmToast .toast-header {
            background: linear-gradient(135deg, #dc3545, #c0392b) !important;
        }

        /* Button hover effects */
        .toast .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transition: all 0.2s ease;
        }

        /* Responsive toast */
        @@media (max-width: 767.98px) {
            .toast {
                min-width: 90vw;
                max-width: 90vw;
            }

            .toast-container {
                padding: 1rem !important;
            }
        }

        /* Responsive adjustments */
        @@media (max-width: 991.98px) {
            .col-lg-6:first-child {
                margin-bottom: 2rem;
            }
        }

        @@media (max-width: 767.98px) {
            .table-responsive {
                border: 1px solid #dee2e6;
                border-radius: 10px;
                overflow-x: auto;
            }

            .btn-group {
                flex-direction: column;
            }

                .btn-group .btn {
                    margin: 1px 0;
                    width: 100%;
                }
        }

        /* Video container enhancements */
        .ratio iframe {
            transition: opacity 0.3s ease;
        }

            .ratio iframe:hover {
                opacity: 0.95;
            }
    </style>
}